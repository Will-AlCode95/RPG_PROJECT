# Importa a fun√ß√£o randint para gerar n√∫meros aleat√≥rios (n√£o usada no c√≥digo atual)
from random import randint

# Lista que armazena todos os NPCs criados no jogo
lista_npcs = []

# Dicion√°rio que representa o jogador com todas suas caracter√≠sticas
player = {
    "nome": "William",        # Nome do jogador
    "level": 1,              # N√≠vel atual do jogador
    "exp": 0,                # Experi√™ncia atual do jogador
    "exp_max": 50,           # Experi√™ncia necess√°ria para subir de n√≠vel
    "hp": 100,               # Pontos de vida atuais
    "hp_max": 100,           # Pontos de vida m√°ximos
    "dano": 25,              # Dano que o jogador causa por ataque
}

# Fun√ß√£o respons√°vel por criar um novo NPC com base no level fornecido
def criar_npc(level):
    """
    Cria um novo NPC (monstro) com atributos baseados no level
    - Quanto maior o level, mais forte o NPC ser√°
    """
    novo_npc = {
        "nome": f"Monstro #{level}#",      # Nome √∫nico baseado no level
        "level": level,                    # Level do NPC
        "dano": 5 * level,                # Dano cresce proporcionalmente ao level
        "hp": 100 * level,                # HP cresce proporcionalmente ao level
        "hp_max": 100 * level,            # HP m√°ximo (para restaura√ß√£o)
        "exp": 7 * level,                 # EXP que o jogador ganha ao derrotar este NPC
    }
    return novo_npc

# Fun√ß√£o que gera uma quantidade espec√≠fica de NPCs e os adiciona na lista
def gerar_npcs(n_npcs):
    """
    Gera 'n_npcs' quantidade de NPCs, cada um com level crescente (1, 2, 3...)
    """
    for n in range(n_npcs):
        npc = criar_npc(n + 1)  # Cria NPC com level n+1 (come√ßa do level 1)
        lista_npcs.append(npc)   # Adiciona o NPC na lista global

# Fun√ß√£o que exibe todos os NPCs da lista
def exibir_npcs():
    """Percorre a lista de NPCs e exibe as informa√ß√µes de cada um"""
    for npc in lista_npcs:
        exibir_npc(npc)

# Fun√ß√£o que exibe as informa√ß√µes de um NPC espec√≠fico
def exibir_npc(npc):
    """Mostra todas as caracter√≠sticas do NPC de forma formatada"""
    print(f"NPC: {npc['nome']} | Level: {npc['level']} | Dano: {npc['dano']} | HP: {npc['hp']} | EXP: {npc['exp']}")

# Fun√ß√£o que exibe as informa√ß√µes do jogador
def exibir_player():
    """Mostra todas as caracter√≠sticas do jogador de forma formatada"""
    print(f"Player: {player['nome']} | Level: {player['level']} | Dano: {player['dano']} | HP: {player['hp']}/{player['hp_max']} | EXP: {player['exp']}/{player['exp_max']}")

# Fun√ß√£o que restaura o HP do jogador para o m√°ximo
def reset_player():
    """Restaura o HP do jogador para o valor m√°ximo (usado ap√≥s batalhas)"""
    player["hp"] = player["hp_max"]

# Fun√ß√£o que restaura o HP de um NPC para o m√°ximo
def reset_npc(npc):
    """Restaura o HP do NPC para o valor m√°ximo (reutiliza√ß√£o do mesmo NPC)"""
    npc["hp"] = npc["hp_max"]

# Fun√ß√£o que gerencia o sistema de level up do jogador
def level_up():
    """
    Verifica se o jogador tem EXP suficiente para subir de level
    - Pode subir m√∫ltiplos levels se tiver EXP suficiente
    - Aumenta atributos do jogador a cada level ganho
    - Restaura HP completamente ao subir de level
    """
    # Loop que continua enquanto o jogador tiver EXP suficiente para subir de level
    while player["exp"] >= player["exp_max"]:
        player["level"] += 1                           # Aumenta o level em 1
        player["exp"] -= player["exp_max"]             # Subtrai a EXP usada (mant√©m o excesso)
        player["exp_max"] = int(player["exp_max"] * 1.5)  # Aumenta EXP necess√°ria para pr√≥ximo level
        player["hp_max"] += 20                         # Aumenta HP m√°ximo em 20
        player["dano"] += 5                            # Aumenta dano em 5
        player["hp"] = player["hp_max"]                # Restaura HP para o novo m√°ximo
        
        # Exibe informa√ß√µes sobre o level up
        print(f"üéâ LEVEL UP! {player['nome']} agora √© level {player['level']}!")
        print(f"üí™ Novo HP m√°ximo: {player['hp_max']}")
        print(f"‚öîÔ∏è Novo dano: {player['dano']}")

# Fun√ß√£o principal que gerencia uma batalha completa entre jogador e NPC
def iniciar_batalha(npc):
    """
    Controla todo o fluxo de uma batalha:
    1. Inicia a batalha
    2. Loop de combate (jogador e NPC se atacam)
    3. Determina vencedor
    4. Aplica consequ√™ncias (EXP, level up, etc.)
    5. Reseta HP de ambos os personagens
    """
    # Cabe√ßalho da batalha
    print(f"\n‚öîÔ∏è BATALHA INICIADA contra {npc['nome']}!")
    print("-" * 50)
    
    # Loop principal da batalha - continua enquanto ambos estiverem vivos
    while player["hp"] > 0 and npc["hp"] > 0:
        atacar_npc(npc)           # Jogador ataca o NPC
        if npc["hp"] > 0:         # NPC s√≥ contra-ataca se ainda estiver vivo
            atacar_player(npc)    # NPC ataca o jogador
        exibir_info_batalha(npc)  # Mostra status atual da batalha
        print("-" * 30)

    # Verifica quem venceu a batalha
    if player["hp"] > 0:
        # Jogador venceu - ganha EXP e possivelmente sobe de level
        print(f"üèÜ Monstro derrotado! Ganhou: {npc['exp']} de EXP!")
        player["exp"] += npc["exp"]  # Adiciona EXP ganho ao jogador
        level_up()                   # Verifica e aplica level up se necess√°rio
        exibir_player()              # Mostra status atualizado do jogador
    else:
        # Jogador perdeu
        print(f"üíÄ Voc√™ foi derrotado pelo {npc['nome']}")
        exibir_npc(npc)

    # Restaura HP de ambos personagens para pr√≥ximas batalhas
    reset_player()  # Restaura HP do jogador
    reset_npc(npc)  # Restaura HP do NPC
    print("=" * 50)

# Fun√ß√£o que executa o ataque do jogador contra um NPC
def atacar_npc(npc):
    """
    Processa o ataque do jogador:
    - Calcula dano real causado (n√£o excede HP restante)
    - Reduz HP do NPC
    - Exibe mensagem do ataque
    """
    dano_causado = min(player["dano"], npc["hp"])    # Dano real (n√£o maior que HP restante)
    npc["hp"] = max(0, npc["hp"] - player["dano"])   # Reduz HP (m√≠nimo 0)
    print(f"üó°Ô∏è {player['nome']} atacou {npc['nome']} causando {dano_causado} de dano!")

# Fun√ß√£o que executa o ataque do NPC contra o jogador
def atacar_player(npc):
    """
    Processa o ataque do NPC:
    - Calcula dano real causado (n√£o excede HP restante)
    - Reduz HP do jogador
    - Exibe mensagem do ataque
    """
    dano_causado = min(npc["dano"], player["hp"])      # Dano real (n√£o maior que HP restante)
    player["hp"] = max(0, player["hp"] - npc["dano"])  # Reduz HP (m√≠nimo 0)
    print(f"üëπ {npc['nome']} atacou {player['nome']} causando {dano_causado} de dano!")

# Fun√ß√£o que exibe o status atual da batalha
def exibir_info_batalha(npc):
    """Mostra HP atual do jogador e do NPC durante a batalha"""
    print(f"Player: {player['nome']} | HP: {player['hp']}/{player['hp_max']}")
    print(f"NPC: {npc['nome']} | HP: {npc['hp']}/{npc['hp_max']}")

# ==================== EXECU√á√ÉO DO JOGO ====================
# Esta se√ß√£o √© onde o jogo realmente executa

print("üéÆ INICIANDO JOGO RPG")
print("=" * 50)

# Gera 5 NPCs (Monstro #1#, Monstro #2#, etc.) e os adiciona na lista
gerar_npcs(5)

# Exibe status inicial do jogador
exibir_player()

# Seleciona o primeiro NPC da lista (Monstro #1#) para as batalhas
npc_selecionado = lista_npcs[0]

# Executa 5 batalhas consecutivas contra o mesmo NPC
# Cada batalha: jogador luta ‚Üí ganha EXP ‚Üí possivelmente sobe de level ‚Üí HP resetado
for i in range(8):
    print(f"\nüîÑ BATALHA {i+1}/5")  # Mostra qual batalha est√° acontecendo
    iniciar_batalha(npc_selecionado)  # Executa a batalha

# Exibe informa√ß√µes finais ap√≥s todas as batalhas
print(f"\nüèÅ JOGO FINALIZADO!")
print("Status final do jogador:")
exibir_player()  # Mostra como o jogador est√° ap√≥s todas as batalhas